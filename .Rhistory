f$relig[which.max(f$freq)]
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[gssexam$relig != "Protestant"] <- "Others"
gssexam <- read.csv("~/Desktop/gssexam.csv")
f <- gssexam %>%
select(relig) %>%
group_by(relig) %>%
count()
f$relig[which.max(f$freq)]
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[gssexam$relig != "Protestant"] <- "Others"
gssexam <- read.csv("~/Desktop/gssexam.csv")
f <- gssexam %>%
select(relig) %>%
group_by(relig) %>%
count()
f$relig[which.max(f$freq)]
gssexam$religion <- NA
gssexam$religion[gssexam$relig == f$relig[which.max(f$freq)]] <- f$relig[which.max(f$freq)]
gssexam$religion[gssexam$relig != f$relig[which.max(f$freq)]] <- "Others"
"Protestant"
View(f)
gssexam$religion[gssexam$relig==NA]<-"Others"
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo"), pkgTest)
##################
#b) Recode the variable *relig* to a new dichotomous variable *religion* with two categories:
#the one is the category with the most frequency named as itself,
#the other one is the rest of categories named "Others".
##################
gssexam <- read.csv("~/Desktop/gssexam.csv")
f <- gssexam %>%
select(relig) %>%
group_by(relig) %>%
count()
f$relig[which.max(f$freq)]
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[gssexam$relig != "Protestant"] <- "Others"
gssexam$religion[gssexam$relig==NA]<-"Others"
View(gssexam)
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[gssexam$relig==NA]<-"Others"
View(gssexam)
gssexam$religion[is.na(gssexam$relig)]<-"Others"
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[is.na(gssexam$religlion)]<-"Others"
gssexam$religion[is.na(gssexam$religlion)]
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
is.na(gssexam$religlion)
gssexam$religion[is.na(gssexam$religion)] <-"Others"
gssexam$religion[gssexam$religion==NA] <-"Others"
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[gssexam$religion==NA] <-"Others"
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[is.na(gssexam$religion)] <-"Others"
gssexam <- read.csv("~/Desktop/gssexam.csv")
f <- gssexam %>%
select(relig) %>%
group_by(relig) %>%
count()
f$relig[which.max(f$freq)]
gssexam$religion <- NA
gssexam$religion[gssexam$relig == "Protestant"] <- "Protestant"
gssexam$religion[is.na(gssexam$religion)] <-"Others"
View(gssexam)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
gssexam %>%
group_by(age) %>%
mutate(avgtv=mean(tvhours,na.rm=T)) %>%
ggplot(aes(x=age,y=avgtv))+
geom_point()+
labs(x="Age", y="Average Hours", title="Average hours of watch tv at each age by different races")+
facet_wrap(~race,ncol=2)
commonswrittenquestions <- read.csv("~/Downloads/commonswrittenquestions.csv")
View(commonswrittenquestions)
commonswrittenquestions$question.text
install.packages("wooldridge")
library(wooldridge)
data("countymurders")
force(countymurders)
force(countymurders)
model1 <- lm(formula = countrymurders$murders ~ countrymurders$execs)
countymurders <- data("countymurders")
model1 <- lm(formula = countrymurders$murders ~ countrymurders$execs)
library(wooldridge)
countymurders <- data("countymurders")
model1 <- lm(formula = countymurders$murders ~ countymurders$execs)
model1 <- lm(countymurders$murders ~ countymurders$execs)
model2 <- lm(murders ~ execs, data=countymurders)
library(wooldridge)
data("countymurders")
model1 <- lm(countymurders$murders ~ countymurders$execs)
model2 <- lm(murders ~ execs, data=countymurders)
summary(model1)
model1$coefficients
abline(model1$coefficients[1])
abline(model1$coefficients[1], model1$coefficients[2])
library(wooldridge)
data("countymurders")
model1 <- lm(countymurders$murders ~ countymurders$execs)
model2 <- lm(murders ~ execs, data=countymurders)
summary(model1)
model1$coefficients
abline(a=model1$coefficients[1], b=model1$coefficients[2])
plot(model1)
library(wooldridge)
data("countymurders")
model1 <- lm(countymurders$murders ~ countymurders$execs)
model2 <- lm(murders ~ execs, data=countymurders)
summary(model1)
model1$coefficients
plot(countymurders$murders ~ countymurders$execs)
abline(a=model1$coefficients[1], b=model1$coefficients[2])
plot(model1)
model1 <- lm(countymurders$murders ~ countymurders$execs)
View(model1)
summary(model1)
library(wooldridge)
data("countymurders")
model1 <- lm(countymurders$murders ~ countymurders$execs)
summary(model1)
model2 <- lm(murders ~ execs, data=countymurders)
summary(model1)
model1$coefficients
plot(countymurders$murders ~ countymurders$execs)
abline(a=model1$coefficients[1], b=model1$coefficients[2]) ## can also use ggplot2 here
# plot(model1)
library(wooldridge)
library(dplyr)
fit<-lm(log(wage) ̃log(IQ),data=df_wage2)
summary(fit)
fit<-lm(log(wage)~̃log(IQ),data=df_wage2)
fit<-lm(log(wage)~log(IQ),data=df_wage2)
library(wooldridge)
library(dplyr)
fit<-lm(log(wage)~log(IQ),data=df_wage2)
summary(fit)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readxl"), pkgTest)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
hair_dryer <- read.delim2("~/Desktop/2020_Weekend2_Problems/Problem_C_Data/hair_dryer.tsv")
View(hair_dryer)
###########################
# read in tsv dataset
###########################
hair_dryer <- read.delim2("~/Desktop/2020_Weekend2_Problems/Problem_C_Data/hair_dryer.tsv")
View(hair_dryer)
View(hair_dryer)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
###########################
# read in tsv dataset
###########################
hair_dryer <- read.delim2("~/Desktop/2020_Weekend2_Problems/Problem_C_Data/hair_dryer.tsv")
################
###########################
# draw raw graph
###########################
hair_dryer %>%
filter(product_id=="R9T1FE2ZX2X04")
###########################
# draw raw graph
###########################
hair_dryer$product_id %>%
distinct()
###########################
# draw raw graph
###########################
hair_dryer$product_id %>%
distinct()
###########################
# draw raw graph
###########################
hair_dryer$product_id %>%
unique()
###########################
# draw raw graph
###########################
hair_dryer$product_parent %>%
unique()
###########################
# draw raw graph
###########################
hair_dryer$product_title %>%
unique()
###########################
# draw raw graph
###########################
hair_dryer$product_title %>%
unique() %>%
count()
###########################
# draw raw graph
###########################
title <- hair_dryer$product_title %>%
unique()
parent <- hair_dryer$product_parent %>%
unique()
parent <- hair_dryer$product_id %>%
unique()
libray(ggplot2)
library(ggplot2)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr", "ggplot2"), pkgTest)
###########################
# read in tsv dataset
###########################
hair_dryer <- read.delim2("~/Desktop/2020_Weekend2_Problems/Problem_C_Data/hair_dryer.tsv")
###########################
# draw raw graph
###########################
id <- hair_dryer$product_id %>%
unique()
View(hair_dryer)
pacifier.sorted <- read.csv("~/Documents/GitHub/MCM2020E/Sorted/pacifier.sorted.csv")
View(pacifier.sorted)
View(pacifier.sorted)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr", "ggplot2"), pkgTest)
###########################
# read in tsv dataset
###########################
hair_dryer <- read.delim2("~/Desktop/2020_Weekend2_Problems/Problem_C_Data/hair_dryer.tsv")
###########################
# draw raw graph
###########################
id <- hair_dryer$product_id %>%
unique()
df <- hair_dryer %>%
group_by(product_id, review_date) %>%
count
View(df)
View(df)
sum(which(df$freq!=1))
###########################
# draw raw graph
###########################
df <- hair_dryer
df$review_date <- as.Date(hair_dryer$review_date)
df$review_date <- as.Date(hair_dryer$review_date, format = %m/%d/%Y)
df$review_date <- as.Date(hair_dryer$review_date, format = "%m/%d/%Y")
##########################
# star rating
##########################
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
View(df)
View(df)
df_a <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# star rating
##########################
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df_a <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
View(df_a)
write.csv(df_a, "true_final_score.cvs")
write.csv(df_a, "true_final_score.csv")
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df_a <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
View(df)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$avg_rating)
mean(microwave$avg_rating)
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$total_score)
mean(microwave$total_score)
mean(pacifier$total_score)
sd(hair_dryer$total_score)
sd(microwave$total_score)
sd(pacifier$total_score)
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df_a <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
n
setwd('~/Documents/GitHub/MCM2020E/Sensitivity/')
setwd('~/Documents/GitHub/MCM2020E/Sensitivity/')
df_b <- df %>%
mutate(total_score = 0.2*avg_rating + 0.8*evaluation_score)
write.csv(df_b, "0208.csv")
df_c <- df %>%
mutate(total_score = 0.3*avg_rating + 0.7*evaluation_score)
write.csv(df_c, "0307.csv")
df_d <- df %>%
mutate(total_score = 0.7*avg_rating + 0.3*evaluation_score)
write.csv(df_d, "0703.csv")
df_e <- df %>%
mutate(total_score = 0.8*avg_rating + 0.2*evaluation_score)
write.csv(df_e, "0802.csv")
`0208` <- read.csv("~/Documents/GitHub/MCM2020E/Sensitivity/0208.csv")
View(`0208`)
df <- read.csv("~/Documents/GitHub/MCM2020E/Sensitivity/0208.csv")
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$total_score)
mean(microwave$total_score)
mean(pacifier$total_score)
sd(hair_dryer$total_score)
sd(microwave$total_score)
sd(pacifier$total_score)
# 0802
df <- read.csv("~/Documents/GitHub/MCM2020E/Sensitivity/0802.csv")
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$total_score)
mean(microwave$total_score)
mean(pacifier$total_score)
sd(hair_dryer$total_score)
sd(microwave$total_score)
sd(pacifier$total_score)
setwd('~/Documents/GitHub/MCM2020E/')
df <- read.csv("final_score.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df <- df %>%
mutate(total_score = 0.469*avg_rating + 0.531*evaluation_score)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$total_score)
mean(microwave$total_score)
mean(pacifier$total_score)
sd(hair_dryer$total_score)
sd(microwave$total_score)
sd(pacifier$total_score)
