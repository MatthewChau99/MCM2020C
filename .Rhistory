}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# time dependency
##########################
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# time dependency
##########################
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
# number of observation
n_row(hair_dryer)
n_row(microwave)
n_row(pacifier)
n_row(hair_dryer)
# number of observation
nrow(hair_dryer)
nrow(microwave)
nrow(pacifier)
h <- hair_dryer %>%
group_by(product_id)
# number of products
h <- hair_dryer %>%
group_by(product_id) %>%
unique()
h <- hair_dryer %>%
group_by(product_id) %>%
unique()
# number of products
h <- hair_dryer$product_id %>%
unique()
n_row(h)
nrow(h)
# number of products
h <- hair_dryer$product_id %>%
unique()
nrow(h)
# number of products
h <- hair_dryer$product_id %>%
unique() %>%
count()
# number of products
h <- hair_dryer$product_id %>%
unique()
# number of products
h <- hair_dryer$product_id %>%
unique() %>%
count()
View(h)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# time dependency
##########################
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
# number of observation
nrow(hair_dryer)
nrow(microwave)
nrow(pacifier)
# number of products
h <- hair_dryer$product_id %>%
unique() %>%
count()
p <- pacifier$product_id %>%
unique() %>%
count()
m <- microwave$product_id %>%
unique() %>%
count()
output_reorganized <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
View(output_reorganized)
##########################
# review rating
##########################
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# review rating
##########################
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
hair_dryer <- df %>%
fitler(product_type=="hair_dryer")
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(pacifier=="pacifier")
microwave <- df %>%
filter(microwave=="microwave")
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$evaluation_score)
mean(pacifier$evaluation_score)
mean(microwave$evaluation_score)
sd(hair_dryer$evaluation_score)
mean(hair_dryer$evaluation_score)
mean(microwave$evaluation_score)
mean(pacifier$evaluation_score)
sd(hair_dryer$evaluation_score)
sd(microwave$evaluation_score)
sd(pacifier$evaluation_score)
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
mean(hair_dryer$evaluation_score)
mean(microwave$evaluation_score)
mean(pacifier$evaluation_score)
sd(hair_dryer$evaluation_score)
sd(microwave$evaluation_score)
sd(pacifier$evaluation_score)
##########################
# star rating
##########################
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
mean(hair_dryer$star_rating)
mean(microwave$star_rating)
mean(pacifier$star_rating)
sd(hair_dryer$star_rating)
sd(microwave$star_rating)
sd(pacifier$star_rating)
p <- pacifier$product_id %>%
unique() %>%
count()
View(p)
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
hair_dryer_s <- hair_dryer$star_rating
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave_s <- microwave$star_rating
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier_s <- pacifier$star_rating
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# star rating
##########################
setwd('~/Documents/GitHub/MCM2020E/')
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
hair_dryer_s <- hair_dryer$star_rating
microwave <- read.delim2("microwave.tsv", stringsAsFactors = F, encoding = "UTF-8")
microwave_s <- microwave$star_rating
pacifier <- read.delim2("pacifier.tsv", stringsAsFactors = F, encoding = "UTF-8")
pacifier_s <- pacifier$star_rating
hair_dryer <- read.delim2("hair_dryer.tsv", stringsAsFactors = F, encoding = "UTF-8")
hair_dryer_s <- hair_dryer %>%
select(product_id, star_rating)
View(hair_dryer_s)
View(hair_dryer_s)
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$evaluation_score)
mean(microwave$evaluation_score)
mean(pacifier$evaluation_score)
mean(hair_dryer$star_rating)
mean(microwave$star_rating)
mean(pacifier$star_rating)
View(hair_dryer)
mean(hair_dryer$evaluation_score)
mean(microwave$evaluation_score)
mean(pacifier$evaluation_score)
mean(hair_dryer$avg_rating)
mean(microwave$avg_rating)
mean(pacifier$avg_rating)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# review rating
##########################
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
mean(hair_dryer$evaluation_score)
mean(microwave$evaluation_score)
mean(pacifier$evaluation_score)
mean(hair_dryer$avg_rating)
mean(microwave$avg_rating)
mean(pacifier$avg_rating)
sd(hair_dryer$evaluation_score)
sd(microwave$evaluation_score)
sd(pacifier$evaluation_score)
mean(hair_dryer$avg_rating)
mean(microwave$avg_rating)
mean(pacifier$avg_rating)
sd(hair_dryer$avg_rating)
sd(microwave$avg_rating)
sd(pacifier$avg_rating)
View(hair_dryer)
df_new <- unique(df)
View(df_new)
##########################
# star rating
##########################
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df_new <- unique(df)
write.csv(df_new, final_score)
write.csv(df_new, "final_score.csv")
##########################
# star rating
##########################
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df<- unique(df)
############################
# clean environment
# load packages
############################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "XML", "tidyr", "lubridate", "readr"), pkgTest)
##########################
# star rating
##########################
df <- read.csv("~/Desktop/output_reorganized.csv", encoding="UTF-8", stringsAsFactors=FALSE)
df<- unique(df)
hair_dryer <- df %>%
filter(product_type=="hair_dryer")
pacifier <- df %>%
filter(product_type=="pacifier")
microwave <- df %>%
filter(product_type=="microwave")
View(df)
scatterplot <- ggplot(hair_dryer, aes(x=avg_rating, y=evaluation_score)) +
geom_point() +
geom_smooth(method="lm")
scatterplot
h <- lm(avg_rating ~ evaluation_score, data=hair_dryer)
summary(h)
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = c("pearson", "kendall", "spearman"))
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "pearson")
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "kendall")
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "spearman")
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "pearson")
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "kendall")
cor(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "spearman")
library("ggpubr")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
install.packages("ggpubr")
library("ggpubr")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
cor.test(hair_dryer$avg_rating, hair_dryer$evaluation_score, method = "pearson")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(pacifier, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "kendall",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "kendall",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating")
cor.coef = TRUE, cor.method = "spearman"",
cor.coef = TRUE, cor.method = "spearman,
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(pacifier, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "red")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "red4")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "red3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "firebrick3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "firebrick3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "person",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "firebrick3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "firebrick3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "red3")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "darkorange2")
ggscatter(pacifier, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating",
color = "dodgerblue4")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating", title = "Hair Dryer"
color = "red3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating", ylab = "Average Review Rating", title = "Hair Dryer",
color = "red3")
ggscatter(hair_dryer, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating of Hair Dryer", ylab = "Average Review Rating of Hair Dryer",
color = "red3")
ggscatter(microwave, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating of Microwave", ylab = "Average Review Rating of Microwave",
color = "darkorange2")
ggscatter(pacifier, x = "avg_rating", y = "evaluation_score",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Average Star Rating of Pacifier", ylab = "Average Review Rating of Pacifier",
color = "dodgerblue4")
